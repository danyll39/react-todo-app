{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","firstRender","useRef","useState","inputValue","setInputValue","todos","setTodos","useEffect","current","localStorage","setItem","JSON","stringify","getItem","newTodos","parse","className","Jumbotron","fluid","Container","Form","onSubmit","e","preventDefault","trim","text","id","uudiv4","InputGroup","size","FormControl","type","autoFocus","placeholder","value","onChange","target","Append","Button","variant","map","todo","ListGroup","Item","onClick","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAsEeA,EAjEH,WACV,IAAMC,EAAcC,kBAAO,GADX,EAEoBC,mBAAS,IAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGUF,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,KAkChB,OAhBAC,qBAAU,WACJP,EAAYQ,QACdR,EAAYQ,SAAU,EAEtBC,aAAaC,QAAQ,OAAQC,KAAKC,UAAL,YAAmBP,OAEjD,CAACA,IAEJE,qBAAU,WACR,GAAqC,OAAjCE,aAAaI,QAAQ,QAAkB,CACzC,IAAMC,EAAWL,aAAaI,QAAQ,QACtCP,EAASK,KAAKI,MAAL,sBAAeV,GAAf,CAAsBS,SAGhC,IAGD,sBAAKE,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,YAAYE,OAAK,EAAtC,SAAuC,oBAAIF,UAAU,OAAd,yCACvC,cAACG,EAAA,EAAD,CAAWH,UAAU,YAArB,SACE,sBAAKA,UAAU,aAAf,UACE,cAACI,EAAA,EAAD,CAAMC,SAlCE,SAACC,GACfA,EAAEC,iBACwB,KAAtBpB,EAAWqB,SAEflB,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAClBoB,KAAMtB,EACNuB,GAAIC,kBAENvB,EAAc,MA0BR,SACE,eAACwB,EAAA,EAAD,CAAYC,KAAK,UAAUb,UAAU,OAArC,UACE,cAACc,EAAA,EAAD,CAAaC,KAAK,OAChBC,WAAS,EACTC,YAAY,gBACZC,MAAO/B,EACPgC,SAAU,SAACb,GAAD,OAAOlB,EAAckB,EAAEc,OAAOF,UAE1C,cAACN,EAAA,EAAWS,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQT,KAAK,UAAUU,QAAQ,OAAOR,KAAK,SAA3C,wBAIL1B,EAAMmC,KAAI,SAACC,GAAD,OACT,eAACC,EAAA,EAAUC,KAAX,CAA8B3B,UAAU,OAAxC,UAEE,4BAAIyB,EAAKhB,OACT,mBAAGmB,QAAS,kBAzCJlB,EAyCqBe,EAAKf,QAxC5CpB,EAASD,EAAMwC,QAAO,SAACJ,GAAD,OAAUA,EAAKf,KAAOA,MAD3B,IAACA,GAyC+BV,UAAU,uBAH9ByB,EAAKf,gBC9CvBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff819216.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Form, Jumbotron, Button, InputGroup, FormControl, ListGroup, Container } from 'react-bootstrap';\nimport { v1 as uudiv4 } from 'uuid';\nimport './App.css';\n\nconst App = () => {\n  const firstRender = useRef(true);\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState([]);\n// add todo function \n  const addTodo = (e) => {\n    e.preventDefault()\n    if (inputValue.trim() === '') return\n// set todo to page \n    setTodos([...todos, {\n      text: inputValue,\n      id: uudiv4()\n    }])\n    setInputValue('');\n  };\n  const removeTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false\n    } else {\n      localStorage.setItem(\"Todo\", JSON.stringify([...todos]))\n    }\n  }, [todos]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"Todo\") !== null) {\n      const newTodos = localStorage.getItem(\"Todo\")\n      setTodos(JSON.parse([...todos, newTodos]))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Jumbotron className=\"jumbotron\" fluid><h1 className=\"text\">WHAT'S ON YOUR TODO LIST?</h1></Jumbotron>\n      <Container className=\"container\">\n        <div className=\"list-group\">\n          <Form onSubmit={addTodo}>\n            <InputGroup size=\"default\" className=\"mb-3\">\n              <FormControl type=\"text\"\n                autoFocus\n                placeholder=\"Add a task...\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n              />\n              <InputGroup.Append>\n                <Button size=\"defatul\" variant=\"info\" type=\"submit\">Add</Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form>\n          {todos.map((todo) => (\n            <ListGroup.Item key={todo.id} className=\"todo\">\n              \n              <p>{todo.text}</p>\n              <i onClick={() => removeTodo(todo.id)} className=\"fas fa-trash-alt\"></i>\n            </ListGroup.Item>\n          ))}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}